// This file was automatically generated by SqlOrm
/***************************************************************************************************
 *
 * $QTCARTO_BEGIN_LICENSE:GPL3$
 *
 * Copyright (C) 2016 Fabrice Salvaire
 * Contact: http://www.fabrice-salvaire.fr
 *
 * This file is part of the QtCarto library.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * $QTCARTO_END_LICENSE$
 *
 **************************************************************************************************/

/**************************************************************************************************/

#include "bleaudb-generated.h"

#include "database/json_helper.h"

/**************************************************************************************************/

// QC_BEGIN_NAMESPACE

#include "bleaudb/bleaudb_json_helper.h"

/**************************************************************************************************/

BBleauPlaceSchema::BBleauPlaceSchema()
: QcSchema(QLatin1String("BBleauPlace"))
{
  add_field(QcSchemaField(QLatin1String("coordinate"),
                          QLatin1String("QGeoCoordinate"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("coordinate"),
                          QLatin1String("coordinate"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("name"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("name"),
                          QLatin1String("name"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("category"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("category"),
                          QLatin1String("category"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("note"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("note"),
                          QLatin1String("note"),
                          QLatin1String(""),
                          QLatin1String("")));
}

BBleauPlaceSchema::~BBleauPlaceSchema()
{}

/**************************************************************************************************/

BBleauPlace::BBleauPlace()
  : m_bits(4),
    m_coordinate(),
    m_name(),
    m_category(),
    m_note()
{}

BBleauPlace::BBleauPlace(const BBleauPlace & other)
  : m_bits(other.m_bits),
    m_coordinate(other.m_coordinate),
    m_name(other.m_name),
    m_category(other.m_category),
    m_note(other.m_note)
{}

BBleauPlace::BBleauPlace(const QJsonObject & json_object)
 : BBleauPlace()
{
  m_coordinate = bleaudb::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_name = json_object[QLatin1String("name")].toString();
  m_category = json_object[QLatin1String("category")].toString();
  m_note = json_object[QLatin1String("note")].toString();
}

BBleauPlace::BBleauPlace(const QVariantHash & variant_hash)
 : BBleauPlace()
{
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_category = variant_hash[QLatin1String("category")].toString();
  m_note = variant_hash[QLatin1String("note")].toString();
}

BBleauPlace::BBleauPlace(const QVariantList & variants)
 : BBleauPlace()
{
  m_coordinate = variants[0].value<QGeoCoordinate>();
  m_name = variants[1].toString();
  m_category = variants[2].toString();
  m_note = variants[3].toString();
}

BBleauPlace::BBleauPlace(const QSqlRecord & record)
 : BBleauPlace()
{
  m_coordinate = record.value(0).value<QGeoCoordinate>();
  m_name = record.value(1).toString();
  m_category = record.value(2).toString();
  m_note = record.value(3).toString();
}

BBleauPlace::BBleauPlace(const QSqlQuery & query)
 : BBleauPlace()
{
  m_coordinate = query.value(0).value<QGeoCoordinate>();
  m_name = query.value(1).toString();
  m_category = query.value(2).toString();
  m_note = query.value(3).toString();
}

BBleauPlace::~BBleauPlace()
{}

BBleauPlace &
BBleauPlace::operator=(const BBleauPlace & other)
{
  if (this != &other) {
    m_bits = other.m_bits;
    m_coordinate = other.m_coordinate;
    m_name = other.m_name;
    m_category = other.m_category;
    m_note = other.m_note;
  }

  return *this;
}

bool
BBleauPlace::operator==(const BBleauPlace & other)
{
  if (m_bits != other.m_bits)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_category != other.m_category)
    return false;
  if (m_note != other.m_note)
    return false;

  return true;
}

void
BBleauPlace::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;
    m_bits.setBit(BBleauPlaceSchema::Fields::COORDINATE);
    emit coordinateChanged();
  }
}

void
BBleauPlace::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;
    m_bits.setBit(BBleauPlaceSchema::Fields::NAME);
    emit nameChanged();
  }
}

void
BBleauPlace::set_category(const QString & value)
{
  if (m_category != value) {
    m_category = value;
    m_bits.setBit(BBleauPlaceSchema::Fields::CATEGORY);
    emit categoryChanged();
  }
}

void
BBleauPlace::set_note(const QString & value)
{
  if (m_note != value) {
    m_note = value;
    m_bits.setBit(BBleauPlaceSchema::Fields::NOTE);
    emit noteChanged();
  }
}

QJsonObject
BBleauPlace::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_category_modified())
      json_object.insert(QLatin1String("category"), QJsonValue(m_category));
    if (is_note_modified())
      json_object.insert(QLatin1String("note"), QJsonValue(m_note));
  } else {
    json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("category"), QJsonValue(m_category));
    json_object.insert(QLatin1String("note"), QJsonValue(m_note));
  }

  return json_object;
}


QVariantHash
BBleauPlace::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_category_modified())
      variant_hash[QLatin1String("category")] = m_category;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("category")] = m_category;
    variant_hash[QLatin1String("note")] = m_note;
  }

  return variant_hash;
}

QVariantList
BBleauPlace::to_variant_list() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_category;
  variants << m_note;

  return variants;
}

QVariantHash
BBleauPlace::to_variant_hash_sql(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_category_modified())
      variant_hash[QLatin1String("category")] = m_category;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("category")] = m_category;
    variant_hash[QLatin1String("note")] = m_note;
  }

  return variant_hash;
}

QVariantList
BBleauPlace::to_variant_list_sql() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_category;
  variants << m_note;

  return variants;
}



QVariant
BBleauPlace::field(int position) const
{
  switch(position) {
   case BBleauPlaceSchema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case BBleauPlaceSchema::Fields::NAME:
     return m_name;
   case BBleauPlaceSchema::Fields::CATEGORY:
     return m_category;
   case BBleauPlaceSchema::Fields::NOTE:
     return m_note;
   default:
     return QVariant(); // error
  }
}

void
BBleauPlace::set_field(int position, const QVariant & value)
{
  switch(position) {
   case BBleauPlaceSchema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case BBleauPlaceSchema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case BBleauPlaceSchema::Fields::CATEGORY: {
     m_category = value.toString();
     break;
   }
   case BBleauPlaceSchema::Fields::NOTE: {
     m_note = value.toString();
     break;
   }
  }
}

QDataStream &
operator<<(QDataStream & out, const BBleauPlace & obj)
{
  out << obj.coordinate();
  out << obj.name();
  out << obj.category();
  out << obj.note();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BBleauPlace & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;

  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_category(_QString);
  in >> _QString;
  obj.set_note(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BBleauPlace & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.nospace() << QLatin1Literal("BBleauPlace(");
  debug << obj.coordinate();
  debug << QLatin1Literal(", ");
  debug << obj.name();
  debug << QLatin1Literal(", ");
  debug << obj.category();
  debug << QLatin1Literal(", ");
  debug << obj.note();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

BBleauBoulderSchema::BBleauBoulderSchema()
: QcSchema(QLatin1String("BBleauBoulder"))
{
  add_field(QcSchemaField(QLatin1String("coordinate"),
                          QLatin1String("QGeoCoordinate"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("coordinate"),
                          QLatin1String("coordinate"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("name"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("name"),
                          QLatin1String("name"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("comment"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("comment"),
                          QLatin1String("comment"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("grade"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("grade"),
                          QLatin1String("grade"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("number"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("number"),
                          QLatin1String("number"),
                          QLatin1String(""),
                          QLatin1String("")));
}

BBleauBoulderSchema::~BBleauBoulderSchema()
{}

/**************************************************************************************************/

BBleauBoulder::BBleauBoulder()
  : m_bits(5),
    m_coordinate(),
    m_name(),
    m_comment(),
    m_grade(),
    m_number()
{}

BBleauBoulder::BBleauBoulder(const BBleauBoulder & other)
  : m_bits(other.m_bits),
    m_coordinate(other.m_coordinate),
    m_name(other.m_name),
    m_comment(other.m_comment),
    m_grade(other.m_grade),
    m_number(other.m_number)
{}

BBleauBoulder::BBleauBoulder(const QJsonObject & json_object)
 : BBleauBoulder()
{
  m_coordinate = bleaudb::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_name = json_object[QLatin1String("name")].toString();
  m_comment = json_object[QLatin1String("comment")].toString();
  m_grade = json_object[QLatin1String("grade")].toString();
  m_number = json_object[QLatin1String("number")].toString();
}

BBleauBoulder::BBleauBoulder(const QVariantHash & variant_hash)
 : BBleauBoulder()
{
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_comment = variant_hash[QLatin1String("comment")].toString();
  m_grade = variant_hash[QLatin1String("grade")].toString();
  m_number = variant_hash[QLatin1String("number")].toString();
}

BBleauBoulder::BBleauBoulder(const QVariantList & variants)
 : BBleauBoulder()
{
  m_coordinate = variants[0].value<QGeoCoordinate>();
  m_name = variants[1].toString();
  m_comment = variants[2].toString();
  m_grade = variants[3].toString();
  m_number = variants[4].toString();
}

BBleauBoulder::BBleauBoulder(const QSqlRecord & record)
 : BBleauBoulder()
{
  m_coordinate = record.value(0).value<QGeoCoordinate>();
  m_name = record.value(1).toString();
  m_comment = record.value(2).toString();
  m_grade = record.value(3).toString();
  m_number = record.value(4).toString();
}

BBleauBoulder::BBleauBoulder(const QSqlQuery & query)
 : BBleauBoulder()
{
  m_coordinate = query.value(0).value<QGeoCoordinate>();
  m_name = query.value(1).toString();
  m_comment = query.value(2).toString();
  m_grade = query.value(3).toString();
  m_number = query.value(4).toString();
}

BBleauBoulder::~BBleauBoulder()
{}

BBleauBoulder &
BBleauBoulder::operator=(const BBleauBoulder & other)
{
  if (this != &other) {
    m_bits = other.m_bits;
    m_coordinate = other.m_coordinate;
    m_name = other.m_name;
    m_comment = other.m_comment;
    m_grade = other.m_grade;
    m_number = other.m_number;
  }

  return *this;
}

bool
BBleauBoulder::operator==(const BBleauBoulder & other)
{
  if (m_bits != other.m_bits)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_comment != other.m_comment)
    return false;
  if (m_grade != other.m_grade)
    return false;
  if (m_number != other.m_number)
    return false;

  return true;
}

void
BBleauBoulder::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;
    m_bits.setBit(BBleauBoulderSchema::Fields::COORDINATE);
    emit coordinateChanged();
  }
}

void
BBleauBoulder::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;
    m_bits.setBit(BBleauBoulderSchema::Fields::NAME);
    emit nameChanged();
  }
}

void
BBleauBoulder::set_comment(const QString & value)
{
  if (m_comment != value) {
    m_comment = value;
    m_bits.setBit(BBleauBoulderSchema::Fields::COMMENT);
    emit commentChanged();
  }
}

void
BBleauBoulder::set_grade(const QString & value)
{
  if (m_grade != value) {
    m_grade = value;
    m_bits.setBit(BBleauBoulderSchema::Fields::GRADE);
    emit gradeChanged();
  }
}

void
BBleauBoulder::set_number(const QString & value)
{
  if (m_number != value) {
    m_number = value;
    m_bits.setBit(BBleauBoulderSchema::Fields::NUMBER);
    emit numberChanged();
  }
}

QJsonObject
BBleauBoulder::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_comment_modified())
      json_object.insert(QLatin1String("comment"), QJsonValue(m_comment));
    if (is_grade_modified())
      json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    if (is_number_modified())
      json_object.insert(QLatin1String("number"), QJsonValue(m_number));
  } else {
    json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("comment"), QJsonValue(m_comment));
    json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    json_object.insert(QLatin1String("number"), QJsonValue(m_number));
  }

  return json_object;
}


QVariantHash
BBleauBoulder::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_comment_modified())
      variant_hash[QLatin1String("comment")] = m_comment;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("comment")] = m_comment;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("number")] = m_number;
  }

  return variant_hash;
}

QVariantList
BBleauBoulder::to_variant_list() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_comment;
  variants << m_grade;
  variants << m_number;

  return variants;
}

QVariantHash
BBleauBoulder::to_variant_hash_sql(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_comment_modified())
      variant_hash[QLatin1String("comment")] = m_comment;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("comment")] = m_comment;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("number")] = m_number;
  }

  return variant_hash;
}

QVariantList
BBleauBoulder::to_variant_list_sql() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_comment;
  variants << m_grade;
  variants << m_number;

  return variants;
}



QVariant
BBleauBoulder::field(int position) const
{
  switch(position) {
   case BBleauBoulderSchema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case BBleauBoulderSchema::Fields::NAME:
     return m_name;
   case BBleauBoulderSchema::Fields::COMMENT:
     return m_comment;
   case BBleauBoulderSchema::Fields::GRADE:
     return m_grade;
   case BBleauBoulderSchema::Fields::NUMBER:
     return m_number;
   default:
     return QVariant(); // error
  }
}

void
BBleauBoulder::set_field(int position, const QVariant & value)
{
  switch(position) {
   case BBleauBoulderSchema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case BBleauBoulderSchema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case BBleauBoulderSchema::Fields::COMMENT: {
     m_comment = value.toString();
     break;
   }
   case BBleauBoulderSchema::Fields::GRADE: {
     m_grade = value.toString();
     break;
   }
   case BBleauBoulderSchema::Fields::NUMBER: {
     m_number = value.toString();
     break;
   }
  }
}

QDataStream &
operator<<(QDataStream & out, const BBleauBoulder & obj)
{
  out << obj.coordinate();
  out << obj.name();
  out << obj.comment();
  out << obj.grade();
  out << obj.number();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BBleauBoulder & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;

  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_comment(_QString);
  in >> _QString;
  obj.set_grade(_QString);
  in >> _QString;
  obj.set_number(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BBleauBoulder & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.nospace() << QLatin1Literal("BBleauBoulder(");
  debug << obj.coordinate();
  debug << QLatin1Literal(", ");
  debug << obj.name();
  debug << QLatin1Literal(", ");
  debug << obj.comment();
  debug << QLatin1Literal(", ");
  debug << obj.grade();
  debug << QLatin1Literal(", ");
  debug << obj.number();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

BBleauCircuitSchema::BBleauCircuitSchema()
: QcSchema(QLatin1String("BBleauCircuit"))
{
  add_field(QcSchemaField(QLatin1String("coordinate"),
                          QLatin1String("QGeoCoordinate"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("coordinate"),
                          QLatin1String("coordinate"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("colour"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("colour"),
                          QLatin1String("colour"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("creation_date"),
                          QLatin1String("int"),
                          QLatin1String("integer"),
                          QLatin1String(""),
                          QLatin1String("creation_date"),
                          QLatin1String("creation_date"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("gestion"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("gestion"),
                          QLatin1String("gestion"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("grade"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("grade"),
                          QLatin1String("grade"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("note"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("note"),
                          QLatin1String("note"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("number"),
                          QLatin1String("int"),
                          QLatin1String("integer"),
                          QLatin1String(""),
                          QLatin1String("number"),
                          QLatin1String("number"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("opener"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("opener"),
                          QLatin1String("opener"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("refection_date"),
                          QLatin1String("int"),
                          QLatin1String("integer"),
                          QLatin1String(""),
                          QLatin1String("refection_date"),
                          QLatin1String("refection_date"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("refection_note"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("refection_note"),
                          QLatin1String("refection_note"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("status"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("status"),
                          QLatin1String("status"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("topos"),
                          QLatin1String("QStringList"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("topos"),
                          QLatin1String("topos"),
                          QLatin1String(""),
                          QLatin1String("")));
}

BBleauCircuitSchema::~BBleauCircuitSchema()
{}

/**************************************************************************************************/

BBleauCircuit::BBleauCircuit()
  : m_bits(12),
    m_coordinate(),
    m_colour(),
    m_creation_date(),
    m_gestion(),
    m_grade(),
    m_note(),
    m_number(),
    m_opener(),
    m_refection_date(),
    m_refection_note(),
    m_status(),
    m_topos()
{}

BBleauCircuit::BBleauCircuit(const BBleauCircuit & other)
  : m_bits(other.m_bits),
    m_coordinate(other.m_coordinate),
    m_colour(other.m_colour),
    m_creation_date(other.m_creation_date),
    m_gestion(other.m_gestion),
    m_grade(other.m_grade),
    m_note(other.m_note),
    m_number(other.m_number),
    m_opener(other.m_opener),
    m_refection_date(other.m_refection_date),
    m_refection_note(other.m_refection_note),
    m_status(other.m_status),
    m_topos(other.m_topos)
{}

BBleauCircuit::BBleauCircuit(const QJsonObject & json_object)
 : BBleauCircuit()
{
  m_coordinate = bleaudb::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_colour = json_object[QLatin1String("colour")].toString();
  m_creation_date = json_object[QLatin1String("creation_date")].toInt();
  m_gestion = json_object[QLatin1String("gestion")].toString();
  m_grade = json_object[QLatin1String("grade")].toString();
  m_note = json_object[QLatin1String("note")].toString();
  m_number = json_object[QLatin1String("number")].toInt();
  m_opener = json_object[QLatin1String("opener")].toString();
  m_refection_date = json_object[QLatin1String("refection_date")].toInt();
  m_refection_note = json_object[QLatin1String("refection_note")].toString();
  m_status = json_object[QLatin1String("status")].toString();
  m_topos = json_helper::load_string_list(json_object[QLatin1String("topos")]);
}

BBleauCircuit::BBleauCircuit(const QVariantHash & variant_hash)
 : BBleauCircuit()
{
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_colour = variant_hash[QLatin1String("colour")].toString();
  m_creation_date = variant_hash[QLatin1String("creation_date")].toInt();
  m_gestion = variant_hash[QLatin1String("gestion")].toString();
  m_grade = variant_hash[QLatin1String("grade")].toString();
  m_note = variant_hash[QLatin1String("note")].toString();
  m_number = variant_hash[QLatin1String("number")].toInt();
  m_opener = variant_hash[QLatin1String("opener")].toString();
  m_refection_date = variant_hash[QLatin1String("refection_date")].toInt();
  m_refection_note = variant_hash[QLatin1String("refection_note")].toString();
  m_status = variant_hash[QLatin1String("status")].toString();
  m_topos = variant_hash[QLatin1String("topos")].toStringList();
}

BBleauCircuit::BBleauCircuit(const QVariantList & variants)
 : BBleauCircuit()
{
  m_coordinate = variants[0].value<QGeoCoordinate>();
  m_colour = variants[1].toString();
  m_creation_date = variants[2].toInt();
  m_gestion = variants[3].toString();
  m_grade = variants[4].toString();
  m_note = variants[5].toString();
  m_number = variants[6].toInt();
  m_opener = variants[7].toString();
  m_refection_date = variants[8].toInt();
  m_refection_note = variants[9].toString();
  m_status = variants[10].toString();
  m_topos = variants[11].toStringList();
}

BBleauCircuit::BBleauCircuit(const QSqlRecord & record)
 : BBleauCircuit()
{
  m_coordinate = record.value(0).value<QGeoCoordinate>();
  m_colour = record.value(1).toString();
  m_creation_date = record.value(2).toInt();
  m_gestion = record.value(3).toString();
  m_grade = record.value(4).toString();
  m_note = record.value(5).toString();
  m_number = record.value(6).toInt();
  m_opener = record.value(7).toString();
  m_refection_date = record.value(8).toInt();
  m_refection_note = record.value(9).toString();
  m_status = record.value(10).toString();
  m_topos = record.value(11).toStringList();
}

BBleauCircuit::BBleauCircuit(const QSqlQuery & query)
 : BBleauCircuit()
{
  m_coordinate = query.value(0).value<QGeoCoordinate>();
  m_colour = query.value(1).toString();
  m_creation_date = query.value(2).toInt();
  m_gestion = query.value(3).toString();
  m_grade = query.value(4).toString();
  m_note = query.value(5).toString();
  m_number = query.value(6).toInt();
  m_opener = query.value(7).toString();
  m_refection_date = query.value(8).toInt();
  m_refection_note = query.value(9).toString();
  m_status = query.value(10).toString();
  m_topos = query.value(11).toStringList();
}

BBleauCircuit::~BBleauCircuit()
{}

BBleauCircuit &
BBleauCircuit::operator=(const BBleauCircuit & other)
{
  if (this != &other) {
    m_bits = other.m_bits;
    m_coordinate = other.m_coordinate;
    m_colour = other.m_colour;
    m_creation_date = other.m_creation_date;
    m_gestion = other.m_gestion;
    m_grade = other.m_grade;
    m_note = other.m_note;
    m_number = other.m_number;
    m_opener = other.m_opener;
    m_refection_date = other.m_refection_date;
    m_refection_note = other.m_refection_note;
    m_status = other.m_status;
    m_topos = other.m_topos;
  }

  return *this;
}

bool
BBleauCircuit::operator==(const BBleauCircuit & other)
{
  if (m_bits != other.m_bits)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_colour != other.m_colour)
    return false;
  if (m_creation_date != other.m_creation_date)
    return false;
  if (m_gestion != other.m_gestion)
    return false;
  if (m_grade != other.m_grade)
    return false;
  if (m_note != other.m_note)
    return false;
  if (m_number != other.m_number)
    return false;
  if (m_opener != other.m_opener)
    return false;
  if (m_refection_date != other.m_refection_date)
    return false;
  if (m_refection_note != other.m_refection_note)
    return false;
  if (m_status != other.m_status)
    return false;
  if (m_topos != other.m_topos)
    return false;

  return true;
}

void
BBleauCircuit::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::COORDINATE);
    emit coordinateChanged();
  }
}

void
BBleauCircuit::set_colour(const QString & value)
{
  if (m_colour != value) {
    m_colour = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::COLOUR);
    emit colourChanged();
  }
}

void
BBleauCircuit::set_creation_date(int value)
{
  if (m_creation_date != value) {
    m_creation_date = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::CREATION_DATE);
    emit creation_dateChanged();
  }
}

void
BBleauCircuit::set_gestion(const QString & value)
{
  if (m_gestion != value) {
    m_gestion = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::GESTION);
    emit gestionChanged();
  }
}

void
BBleauCircuit::set_grade(const QString & value)
{
  if (m_grade != value) {
    m_grade = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::GRADE);
    emit gradeChanged();
  }
}

void
BBleauCircuit::set_note(const QString & value)
{
  if (m_note != value) {
    m_note = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::NOTE);
    emit noteChanged();
  }
}

void
BBleauCircuit::set_number(int value)
{
  if (m_number != value) {
    m_number = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::NUMBER);
    emit numberChanged();
  }
}

void
BBleauCircuit::set_opener(const QString & value)
{
  if (m_opener != value) {
    m_opener = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::OPENER);
    emit openerChanged();
  }
}

void
BBleauCircuit::set_refection_date(int value)
{
  if (m_refection_date != value) {
    m_refection_date = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::REFECTION_DATE);
    emit refection_dateChanged();
  }
}

void
BBleauCircuit::set_refection_note(const QString & value)
{
  if (m_refection_note != value) {
    m_refection_note = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::REFECTION_NOTE);
    emit refection_noteChanged();
  }
}

void
BBleauCircuit::set_status(const QString & value)
{
  if (m_status != value) {
    m_status = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::STATUS);
    emit statusChanged();
  }
}

void
BBleauCircuit::set_topos(const QStringList & value)
{
  if (m_topos != value) {
    m_topos = value;
    m_bits.setBit(BBleauCircuitSchema::Fields::TOPOS);
    emit toposChanged();
  }
}

QJsonObject
BBleauCircuit::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    if (is_colour_modified())
      json_object.insert(QLatin1String("colour"), QJsonValue(m_colour));
    if (is_creation_date_modified())
      json_object.insert(QLatin1String("creation_date"), QJsonValue(m_creation_date));
    if (is_gestion_modified())
      json_object.insert(QLatin1String("gestion"), QJsonValue(m_gestion));
    if (is_grade_modified())
      json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    if (is_note_modified())
      json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    if (is_number_modified())
      json_object.insert(QLatin1String("number"), QJsonValue(m_number));
    if (is_opener_modified())
      json_object.insert(QLatin1String("opener"), QJsonValue(m_opener));
    if (is_refection_date_modified())
      json_object.insert(QLatin1String("refection_date"), QJsonValue(m_refection_date));
    if (is_refection_note_modified())
      json_object.insert(QLatin1String("refection_note"), QJsonValue(m_refection_note));
    if (is_status_modified())
      json_object.insert(QLatin1String("status"), QJsonValue(m_status));
    if (is_topos_modified())
      json_object.insert(QLatin1String("topos"), json_helper::dump_string_list(m_topos));
  } else {
    json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("colour"), QJsonValue(m_colour));
    json_object.insert(QLatin1String("creation_date"), QJsonValue(m_creation_date));
    json_object.insert(QLatin1String("gestion"), QJsonValue(m_gestion));
    json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    json_object.insert(QLatin1String("number"), QJsonValue(m_number));
    json_object.insert(QLatin1String("opener"), QJsonValue(m_opener));
    json_object.insert(QLatin1String("refection_date"), QJsonValue(m_refection_date));
    json_object.insert(QLatin1String("refection_note"), QJsonValue(m_refection_note));
    json_object.insert(QLatin1String("status"), QJsonValue(m_status));
    json_object.insert(QLatin1String("topos"), json_helper::dump_string_list(m_topos));
  }

  return json_object;
}


QVariantHash
BBleauCircuit::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_colour_modified())
      variant_hash[QLatin1String("colour")] = m_colour;
    if (is_creation_date_modified())
      variant_hash[QLatin1String("creation_date")] = m_creation_date;
    if (is_gestion_modified())
      variant_hash[QLatin1String("gestion")] = m_gestion;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
    if (is_opener_modified())
      variant_hash[QLatin1String("opener")] = m_opener;
    if (is_refection_date_modified())
      variant_hash[QLatin1String("refection_date")] = m_refection_date;
    if (is_refection_note_modified())
      variant_hash[QLatin1String("refection_note")] = m_refection_note;
    if (is_status_modified())
      variant_hash[QLatin1String("status")] = m_status;
    if (is_topos_modified())
      variant_hash[QLatin1String("topos")] = m_topos;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("colour")] = m_colour;
    variant_hash[QLatin1String("creation_date")] = m_creation_date;
    variant_hash[QLatin1String("gestion")] = m_gestion;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("number")] = m_number;
    variant_hash[QLatin1String("opener")] = m_opener;
    variant_hash[QLatin1String("refection_date")] = m_refection_date;
    variant_hash[QLatin1String("refection_note")] = m_refection_note;
    variant_hash[QLatin1String("status")] = m_status;
    variant_hash[QLatin1String("topos")] = m_topos;
  }

  return variant_hash;
}

QVariantList
BBleauCircuit::to_variant_list() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_colour;
  variants << m_creation_date;
  variants << m_gestion;
  variants << m_grade;
  variants << m_note;
  variants << m_number;
  variants << m_opener;
  variants << m_refection_date;
  variants << m_refection_note;
  variants << m_status;
  variants << m_topos;

  return variants;
}

QVariantHash
BBleauCircuit::to_variant_hash_sql(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_colour_modified())
      variant_hash[QLatin1String("colour")] = m_colour;
    if (is_creation_date_modified())
      variant_hash[QLatin1String("creation_date")] = m_creation_date;
    if (is_gestion_modified())
      variant_hash[QLatin1String("gestion")] = m_gestion;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
    if (is_opener_modified())
      variant_hash[QLatin1String("opener")] = m_opener;
    if (is_refection_date_modified())
      variant_hash[QLatin1String("refection_date")] = m_refection_date;
    if (is_refection_note_modified())
      variant_hash[QLatin1String("refection_note")] = m_refection_note;
    if (is_status_modified())
      variant_hash[QLatin1String("status")] = m_status;
    if (is_topos_modified())
      variant_hash[QLatin1String("topos")] = m_topos;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("colour")] = m_colour;
    variant_hash[QLatin1String("creation_date")] = m_creation_date;
    variant_hash[QLatin1String("gestion")] = m_gestion;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("number")] = m_number;
    variant_hash[QLatin1String("opener")] = m_opener;
    variant_hash[QLatin1String("refection_date")] = m_refection_date;
    variant_hash[QLatin1String("refection_note")] = m_refection_note;
    variant_hash[QLatin1String("status")] = m_status;
    variant_hash[QLatin1String("topos")] = m_topos;
  }

  return variant_hash;
}

QVariantList
BBleauCircuit::to_variant_list_sql() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_colour;
  variants << m_creation_date;
  variants << m_gestion;
  variants << m_grade;
  variants << m_note;
  variants << m_number;
  variants << m_opener;
  variants << m_refection_date;
  variants << m_refection_note;
  variants << m_status;
  variants << m_topos;

  return variants;
}



QVariant
BBleauCircuit::field(int position) const
{
  switch(position) {
   case BBleauCircuitSchema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case BBleauCircuitSchema::Fields::COLOUR:
     return m_colour;
   case BBleauCircuitSchema::Fields::CREATION_DATE:
     return m_creation_date;
   case BBleauCircuitSchema::Fields::GESTION:
     return m_gestion;
   case BBleauCircuitSchema::Fields::GRADE:
     return m_grade;
   case BBleauCircuitSchema::Fields::NOTE:
     return m_note;
   case BBleauCircuitSchema::Fields::NUMBER:
     return m_number;
   case BBleauCircuitSchema::Fields::OPENER:
     return m_opener;
   case BBleauCircuitSchema::Fields::REFECTION_DATE:
     return m_refection_date;
   case BBleauCircuitSchema::Fields::REFECTION_NOTE:
     return m_refection_note;
   case BBleauCircuitSchema::Fields::STATUS:
     return m_status;
   case BBleauCircuitSchema::Fields::TOPOS:
     return m_topos;
   default:
     return QVariant(); // error
  }
}

void
BBleauCircuit::set_field(int position, const QVariant & value)
{
  switch(position) {
   case BBleauCircuitSchema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case BBleauCircuitSchema::Fields::COLOUR: {
     m_colour = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::CREATION_DATE: {
     m_creation_date = value.toInt();
     break;
   }
   case BBleauCircuitSchema::Fields::GESTION: {
     m_gestion = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::GRADE: {
     m_grade = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::NOTE: {
     m_note = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::NUMBER: {
     m_number = value.toInt();
     break;
   }
   case BBleauCircuitSchema::Fields::OPENER: {
     m_opener = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::REFECTION_DATE: {
     m_refection_date = value.toInt();
     break;
   }
   case BBleauCircuitSchema::Fields::REFECTION_NOTE: {
     m_refection_note = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::STATUS: {
     m_status = value.toString();
     break;
   }
   case BBleauCircuitSchema::Fields::TOPOS: {
     m_topos = value.toStringList();
     break;
   }
  }
}

QDataStream &
operator<<(QDataStream & out, const BBleauCircuit & obj)
{
  out << obj.coordinate();
  out << obj.colour();
  out << obj.creation_date();
  out << obj.gestion();
  out << obj.grade();
  out << obj.note();
  out << obj.number();
  out << obj.opener();
  out << obj.refection_date();
  out << obj.refection_note();
  out << obj.status();
  out << obj.topos();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BBleauCircuit & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;
  QStringList _QStringList;
  int _int;

  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_colour(_QString);
  in >> _int;
  obj.set_creation_date(_int);
  in >> _QString;
  obj.set_gestion(_QString);
  in >> _QString;
  obj.set_grade(_QString);
  in >> _QString;
  obj.set_note(_QString);
  in >> _int;
  obj.set_number(_int);
  in >> _QString;
  obj.set_opener(_QString);
  in >> _int;
  obj.set_refection_date(_int);
  in >> _QString;
  obj.set_refection_note(_QString);
  in >> _QString;
  obj.set_status(_QString);
  in >> _QStringList;
  obj.set_topos(_QStringList);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BBleauCircuit & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.nospace() << QLatin1Literal("BBleauCircuit(");
  debug << obj.coordinate();
  debug << QLatin1Literal(", ");
  debug << obj.colour();
  debug << QLatin1Literal(", ");
  debug << obj.creation_date();
  debug << QLatin1Literal(", ");
  debug << obj.gestion();
  debug << QLatin1Literal(", ");
  debug << obj.grade();
  debug << QLatin1Literal(", ");
  debug << obj.note();
  debug << QLatin1Literal(", ");
  debug << obj.number();
  debug << QLatin1Literal(", ");
  debug << obj.opener();
  debug << QLatin1Literal(", ");
  debug << obj.refection_date();
  debug << QLatin1Literal(", ");
  debug << obj.refection_note();
  debug << QLatin1Literal(", ");
  debug << obj.status();
  debug << QLatin1Literal(", ");
  debug << obj.topos();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

BBleauMassifSchema::BBleauMassifSchema()
: QcSchema(QLatin1String("BBleauMassif"))
{
  add_field(QcSchemaField(QLatin1String("coordinate"),
                          QLatin1String("QGeoCoordinate"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("coordinate"),
                          QLatin1String("coordinate"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("name"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("name"),
                          QLatin1String("name"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("access"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("access"),
                          QLatin1String("access"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("alternative_name"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("alternative_name"),
                          QLatin1String("alternative_name"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("chaos_type"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("chaos_type"),
                          QLatin1String("chaos_type"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("note"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("note"),
                          QLatin1String("note"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("parcelles"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("parcelles"),
                          QLatin1String("parcelles"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("rdv"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("rdv"),
                          QLatin1String("rdv"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("secteur"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("secteur"),
                          QLatin1String("secteur"),
                          QLatin1String(""),
                          QLatin1String("")));
  add_field(QcSchemaField(QLatin1String("velo"),
                          QLatin1String("QString"),
                          QLatin1String("text"),
                          QLatin1String(""),
                          QLatin1String("velo"),
                          QLatin1String("velo"),
                          QLatin1String(""),
                          QLatin1String("")));
}

BBleauMassifSchema::~BBleauMassifSchema()
{}

/**************************************************************************************************/

BBleauMassif::BBleauMassif()
  : m_bits(10),
    m_coordinate(),
    m_name(),
    m_access(),
    m_alternative_name(),
    m_chaos_type(),
    m_note(),
    m_parcelles(),
    m_rdv(),
    m_secteur(),
    m_velo()
{}

BBleauMassif::BBleauMassif(const BBleauMassif & other)
  : m_bits(other.m_bits),
    m_coordinate(other.m_coordinate),
    m_name(other.m_name),
    m_access(other.m_access),
    m_alternative_name(other.m_alternative_name),
    m_chaos_type(other.m_chaos_type),
    m_note(other.m_note),
    m_parcelles(other.m_parcelles),
    m_rdv(other.m_rdv),
    m_secteur(other.m_secteur),
    m_velo(other.m_velo)
{}

BBleauMassif::BBleauMassif(const QJsonObject & json_object)
 : BBleauMassif()
{
  m_coordinate = bleaudb::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_name = json_object[QLatin1String("name")].toString();
  m_access = json_object[QLatin1String("access")].toString();
  m_alternative_name = json_object[QLatin1String("alternative_name")].toString();
  m_chaos_type = json_object[QLatin1String("chaos_type")].toString();
  m_note = json_object[QLatin1String("note")].toString();
  m_parcelles = json_object[QLatin1String("parcelles")].toString();
  m_rdv = json_object[QLatin1String("rdv")].toString();
  m_secteur = json_object[QLatin1String("secteur")].toString();
  m_velo = json_object[QLatin1String("velo")].toString();
}

BBleauMassif::BBleauMassif(const QVariantHash & variant_hash)
 : BBleauMassif()
{
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_access = variant_hash[QLatin1String("access")].toString();
  m_alternative_name = variant_hash[QLatin1String("alternative_name")].toString();
  m_chaos_type = variant_hash[QLatin1String("chaos_type")].toString();
  m_note = variant_hash[QLatin1String("note")].toString();
  m_parcelles = variant_hash[QLatin1String("parcelles")].toString();
  m_rdv = variant_hash[QLatin1String("rdv")].toString();
  m_secteur = variant_hash[QLatin1String("secteur")].toString();
  m_velo = variant_hash[QLatin1String("velo")].toString();
}

BBleauMassif::BBleauMassif(const QVariantList & variants)
 : BBleauMassif()
{
  m_coordinate = variants[0].value<QGeoCoordinate>();
  m_name = variants[1].toString();
  m_access = variants[2].toString();
  m_alternative_name = variants[3].toString();
  m_chaos_type = variants[4].toString();
  m_note = variants[5].toString();
  m_parcelles = variants[6].toString();
  m_rdv = variants[7].toString();
  m_secteur = variants[8].toString();
  m_velo = variants[9].toString();
}

BBleauMassif::BBleauMassif(const QSqlRecord & record)
 : BBleauMassif()
{
  m_coordinate = record.value(0).value<QGeoCoordinate>();
  m_name = record.value(1).toString();
  m_access = record.value(2).toString();
  m_alternative_name = record.value(3).toString();
  m_chaos_type = record.value(4).toString();
  m_note = record.value(5).toString();
  m_parcelles = record.value(6).toString();
  m_rdv = record.value(7).toString();
  m_secteur = record.value(8).toString();
  m_velo = record.value(9).toString();
}

BBleauMassif::BBleauMassif(const QSqlQuery & query)
 : BBleauMassif()
{
  m_coordinate = query.value(0).value<QGeoCoordinate>();
  m_name = query.value(1).toString();
  m_access = query.value(2).toString();
  m_alternative_name = query.value(3).toString();
  m_chaos_type = query.value(4).toString();
  m_note = query.value(5).toString();
  m_parcelles = query.value(6).toString();
  m_rdv = query.value(7).toString();
  m_secteur = query.value(8).toString();
  m_velo = query.value(9).toString();
}

BBleauMassif::~BBleauMassif()
{}

BBleauMassif &
BBleauMassif::operator=(const BBleauMassif & other)
{
  if (this != &other) {
    m_bits = other.m_bits;
    m_coordinate = other.m_coordinate;
    m_name = other.m_name;
    m_access = other.m_access;
    m_alternative_name = other.m_alternative_name;
    m_chaos_type = other.m_chaos_type;
    m_note = other.m_note;
    m_parcelles = other.m_parcelles;
    m_rdv = other.m_rdv;
    m_secteur = other.m_secteur;
    m_velo = other.m_velo;
  }

  return *this;
}

bool
BBleauMassif::operator==(const BBleauMassif & other)
{
  if (m_bits != other.m_bits)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_access != other.m_access)
    return false;
  if (m_alternative_name != other.m_alternative_name)
    return false;
  if (m_chaos_type != other.m_chaos_type)
    return false;
  if (m_note != other.m_note)
    return false;
  if (m_parcelles != other.m_parcelles)
    return false;
  if (m_rdv != other.m_rdv)
    return false;
  if (m_secteur != other.m_secteur)
    return false;
  if (m_velo != other.m_velo)
    return false;

  return true;
}

void
BBleauMassif::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;
    m_bits.setBit(BBleauMassifSchema::Fields::COORDINATE);
    emit coordinateChanged();
  }
}

void
BBleauMassif::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;
    m_bits.setBit(BBleauMassifSchema::Fields::NAME);
    emit nameChanged();
  }
}

void
BBleauMassif::set_access(const QString & value)
{
  if (m_access != value) {
    m_access = value;
    m_bits.setBit(BBleauMassifSchema::Fields::ACCESS);
    emit accessChanged();
  }
}

void
BBleauMassif::set_alternative_name(const QString & value)
{
  if (m_alternative_name != value) {
    m_alternative_name = value;
    m_bits.setBit(BBleauMassifSchema::Fields::ALTERNATIVE_NAME);
    emit alternative_nameChanged();
  }
}

void
BBleauMassif::set_chaos_type(const QString & value)
{
  if (m_chaos_type != value) {
    m_chaos_type = value;
    m_bits.setBit(BBleauMassifSchema::Fields::CHAOS_TYPE);
    emit chaos_typeChanged();
  }
}

void
BBleauMassif::set_note(const QString & value)
{
  if (m_note != value) {
    m_note = value;
    m_bits.setBit(BBleauMassifSchema::Fields::NOTE);
    emit noteChanged();
  }
}

void
BBleauMassif::set_parcelles(const QString & value)
{
  if (m_parcelles != value) {
    m_parcelles = value;
    m_bits.setBit(BBleauMassifSchema::Fields::PARCELLES);
    emit parcellesChanged();
  }
}

void
BBleauMassif::set_rdv(const QString & value)
{
  if (m_rdv != value) {
    m_rdv = value;
    m_bits.setBit(BBleauMassifSchema::Fields::RDV);
    emit rdvChanged();
  }
}

void
BBleauMassif::set_secteur(const QString & value)
{
  if (m_secteur != value) {
    m_secteur = value;
    m_bits.setBit(BBleauMassifSchema::Fields::SECTEUR);
    emit secteurChanged();
  }
}

void
BBleauMassif::set_velo(const QString & value)
{
  if (m_velo != value) {
    m_velo = value;
    m_bits.setBit(BBleauMassifSchema::Fields::VELO);
    emit veloChanged();
  }
}

QJsonObject
BBleauMassif::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_access_modified())
      json_object.insert(QLatin1String("access"), QJsonValue(m_access));
    if (is_alternative_name_modified())
      json_object.insert(QLatin1String("alternative_name"), QJsonValue(m_alternative_name));
    if (is_chaos_type_modified())
      json_object.insert(QLatin1String("chaos_type"), QJsonValue(m_chaos_type));
    if (is_note_modified())
      json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    if (is_parcelles_modified())
      json_object.insert(QLatin1String("parcelles"), QJsonValue(m_parcelles));
    if (is_rdv_modified())
      json_object.insert(QLatin1String("rdv"), QJsonValue(m_rdv));
    if (is_secteur_modified())
      json_object.insert(QLatin1String("secteur"), QJsonValue(m_secteur));
    if (is_velo_modified())
      json_object.insert(QLatin1String("velo"), QJsonValue(m_velo));
  } else {
    json_object.insert(QLatin1String("coordinate"), bleaudb::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("access"), QJsonValue(m_access));
    json_object.insert(QLatin1String("alternative_name"), QJsonValue(m_alternative_name));
    json_object.insert(QLatin1String("chaos_type"), QJsonValue(m_chaos_type));
    json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    json_object.insert(QLatin1String("parcelles"), QJsonValue(m_parcelles));
    json_object.insert(QLatin1String("rdv"), QJsonValue(m_rdv));
    json_object.insert(QLatin1String("secteur"), QJsonValue(m_secteur));
    json_object.insert(QLatin1String("velo"), QJsonValue(m_velo));
  }

  return json_object;
}


QVariantHash
BBleauMassif::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_access_modified())
      variant_hash[QLatin1String("access")] = m_access;
    if (is_alternative_name_modified())
      variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    if (is_chaos_type_modified())
      variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_parcelles_modified())
      variant_hash[QLatin1String("parcelles")] = m_parcelles;
    if (is_rdv_modified())
      variant_hash[QLatin1String("rdv")] = m_rdv;
    if (is_secteur_modified())
      variant_hash[QLatin1String("secteur")] = m_secteur;
    if (is_velo_modified())
      variant_hash[QLatin1String("velo")] = m_velo;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("access")] = m_access;
    variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("parcelles")] = m_parcelles;
    variant_hash[QLatin1String("rdv")] = m_rdv;
    variant_hash[QLatin1String("secteur")] = m_secteur;
    variant_hash[QLatin1String("velo")] = m_velo;
  }

  return variant_hash;
}

QVariantList
BBleauMassif::to_variant_list() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_access;
  variants << m_alternative_name;
  variants << m_chaos_type;
  variants << m_note;
  variants << m_parcelles;
  variants << m_rdv;
  variants << m_secteur;
  variants << m_velo;

  return variants;
}

QVariantHash
BBleauMassif::to_variant_hash_sql(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_access_modified())
      variant_hash[QLatin1String("access")] = m_access;
    if (is_alternative_name_modified())
      variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    if (is_chaos_type_modified())
      variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_parcelles_modified())
      variant_hash[QLatin1String("parcelles")] = m_parcelles;
    if (is_rdv_modified())
      variant_hash[QLatin1String("rdv")] = m_rdv;
    if (is_secteur_modified())
      variant_hash[QLatin1String("secteur")] = m_secteur;
    if (is_velo_modified())
      variant_hash[QLatin1String("velo")] = m_velo;
  } else {
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("access")] = m_access;
    variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("parcelles")] = m_parcelles;
    variant_hash[QLatin1String("rdv")] = m_rdv;
    variant_hash[QLatin1String("secteur")] = m_secteur;
    variant_hash[QLatin1String("velo")] = m_velo;
  }

  return variant_hash;
}

QVariantList
BBleauMassif::to_variant_list_sql() const
{
  QVariantList variants;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_access;
  variants << m_alternative_name;
  variants << m_chaos_type;
  variants << m_note;
  variants << m_parcelles;
  variants << m_rdv;
  variants << m_secteur;
  variants << m_velo;

  return variants;
}



QVariant
BBleauMassif::field(int position) const
{
  switch(position) {
   case BBleauMassifSchema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case BBleauMassifSchema::Fields::NAME:
     return m_name;
   case BBleauMassifSchema::Fields::ACCESS:
     return m_access;
   case BBleauMassifSchema::Fields::ALTERNATIVE_NAME:
     return m_alternative_name;
   case BBleauMassifSchema::Fields::CHAOS_TYPE:
     return m_chaos_type;
   case BBleauMassifSchema::Fields::NOTE:
     return m_note;
   case BBleauMassifSchema::Fields::PARCELLES:
     return m_parcelles;
   case BBleauMassifSchema::Fields::RDV:
     return m_rdv;
   case BBleauMassifSchema::Fields::SECTEUR:
     return m_secteur;
   case BBleauMassifSchema::Fields::VELO:
     return m_velo;
   default:
     return QVariant(); // error
  }
}

void
BBleauMassif::set_field(int position, const QVariant & value)
{
  switch(position) {
   case BBleauMassifSchema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case BBleauMassifSchema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::ACCESS: {
     m_access = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::ALTERNATIVE_NAME: {
     m_alternative_name = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::CHAOS_TYPE: {
     m_chaos_type = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::NOTE: {
     m_note = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::PARCELLES: {
     m_parcelles = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::RDV: {
     m_rdv = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::SECTEUR: {
     m_secteur = value.toString();
     break;
   }
   case BBleauMassifSchema::Fields::VELO: {
     m_velo = value.toString();
     break;
   }
  }
}

QDataStream &
operator<<(QDataStream & out, const BBleauMassif & obj)
{
  out << obj.coordinate();
  out << obj.name();
  out << obj.access();
  out << obj.alternative_name();
  out << obj.chaos_type();
  out << obj.note();
  out << obj.parcelles();
  out << obj.rdv();
  out << obj.secteur();
  out << obj.velo();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BBleauMassif & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;

  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_access(_QString);
  in >> _QString;
  obj.set_alternative_name(_QString);
  in >> _QString;
  obj.set_chaos_type(_QString);
  in >> _QString;
  obj.set_note(_QString);
  in >> _QString;
  obj.set_parcelles(_QString);
  in >> _QString;
  obj.set_rdv(_QString);
  in >> _QString;
  obj.set_secteur(_QString);
  in >> _QString;
  obj.set_velo(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BBleauMassif & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.nospace() << QLatin1Literal("BBleauMassif(");
  debug << obj.coordinate();
  debug << QLatin1Literal(", ");
  debug << obj.name();
  debug << QLatin1Literal(", ");
  debug << obj.access();
  debug << QLatin1Literal(", ");
  debug << obj.alternative_name();
  debug << QLatin1Literal(", ");
  debug << obj.chaos_type();
  debug << QLatin1Literal(", ");
  debug << obj.note();
  debug << QLatin1Literal(", ");
  debug << obj.parcelles();
  debug << QLatin1Literal(", ");
  debug << obj.rdv();
  debug << QLatin1Literal(", ");
  debug << obj.secteur();
  debug << QLatin1Literal(", ");
  debug << obj.velo();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

// QC_END_NAMESPACE

/***************************************************************************************************
 *
 * End
 *
 **************************************************************************************************/
