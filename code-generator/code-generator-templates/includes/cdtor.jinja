{# -*- mode: fundamental -*- -#}

{%- macro ctor_decl(class_name) -%}
{{class_name}}();
{%- endmacro -%}

{%- macro copy_ctor_decl(class_name) -%}
{{class_name}}(const {{class_name}} & other);
{%- endmacro -%}

{%- macro dtor_decl(class_name) -%}
~{{class_name}}();
{%- endmacro -%}

{%- macro copy_operator_decl(class_name) -%}
{{class_name}} & operator=(const {{class_name}} & other);
{%- endmacro -%}



{%- macro ctor_impl(class_name, members) -%}
{{class_name}}::{{class_name}}()
{#-
{%- for base_class in base_classes %}
{% if loop.first %}  : {% else %}    {% endif %}{{ base_class }}(){% if not loop.last or members %},{% endif %}
{%- endfor %}
-#}
{%- for member in members %}
{% if loop.first %}  : {% else %}    {% endif %}{{member.m_name}}({% if member.value %}{{member.value}}{% endif %}){% if not loop.last %},{% endif %}
{%- endfor %}
{}
{%- endmacro -%}

{%- macro copy_ctor_impl(class_name, members) -%}
{{class_name}}::{{class_name}}(const {{class_name}} & other)
{#-
{%- for base_class in base_classes %}
{% if loop.first %}  : {% else %}    {% endif %}{{ base_class }}(){% if not loop.last or members %},{% endif %}
{%- endfor %}
-#}
{%- for member in members %}
{% if loop.first %}  : {% else %}    {% endif %}{{member.m_name}}(other.{{member.m_name}}){% if not loop.last %},{% endif %}
{%- endfor %}
{}
{%- endmacro -%}

{%- macro copy_operator_impl(class_name, members) -%}
{{class_name}} &
{{class_name}}::operator=(const {{class_name}} & other)
{
  if (this != &other) {
{%- for member in members %}
    m_{{member.name}} = other.m_{{member.name}};{% endfor %}
  }

  return *this;
}
{%- endmacro -%}

{%- macro dtor_impl(class_name, members) -%}
{{class_name}}::~{{class_name}}()
{}
{%- endmacro -%}
