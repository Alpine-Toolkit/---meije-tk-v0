#! /usr/bin/env python3
# -*- Python -*-

####################################################################################################
#
# $QTCARTO_BEGIN_LICENSE:GPL3$
#
# Copyright (C) 2016 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
#
# This file is part of the QtCarto library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $QTCARTO_END_LICENSE$
#
####################################################################################################

####################################################################################################

import os
import sys

code_generator_path = os.path.dirname(os.path.abspath(__file__))
source_path = os.path.dirname(code_generator_path)
# print(source_path)

sys.path.insert(0, code_generator_path)

####################################################################################################

import argparse

from CodeGenerator.CppCodeGenerator import Variable

from CodeGenerator.CppClassGenerator import CppClassGenerator
from CodeGenerator.TemplateGenerator import TemplateGenerator

from CodeGenerator.GeneratorSettings import generator_settings

####################################################################################################
#
# Options
#

argument_parser = argparse.ArgumentParser(description='Generate CPP Class',
                                          formatter_class=argparse.ArgumentDefaultsHelpFormatter)

argument_parser.add_argument('--mode', default='template', help='template or generator')
argument_parser.add_argument('--property', action='store_true')
argument_parser.add_argument('--inline-setter', action='store_true')
argument_parser.add_argument('--inline-getter', action='store_true')
argument_parser.add_argument('--suffix', default='-generated', help='file suffix')

argument_parser.add_argument('class_definition_path', metavar='class_def_file',
                             help='class_definition_path')

argument_parser.add_argument('class_file_name', metavar='class_file_name',
                             help='class_definition_path')

args = argument_parser.parse_args()

####################################################################################################

with open(args.class_definition_path) as f:
    class_definition = f.readlines()

class_line = class_definition[0]
if ':' in class_line:
    class_name, parent_class = [x.strip() for x in class_line.split(':')]
    if not parent_class:
        parent_class = None
else:
    class_name = class_line
    parent_class = None

members = []
for line in class_definition[1:]:
    line = line.strip()
    if line.endswith(';'):
        line = line[:-1]
    l = line.rfind(' ')
    type_ = line[:l].strip()
    name = line[l:].strip()
    if name.startswith('m_'):
        name = name[2:]
    member = Variable(name, type_)
    members.append(member)

####################################################################################################

if args.mode == 'template':
    template_path = os.path.join(os.path.dirname(os.path.dirname(__file__)),
                                 'code-generator-templates')
    template_generator = TemplateGenerator(template_path)
    class_definition = dict(
        filename=os.path.basename(args.class_file_name),
        class_name=class_name,
        base_classes=(parent_class,) if parent_class is not None else (),
        has_property=args.property,
        has_inline_getter=args.inline_getter,
        has_inline_setter=args.inline_setter,
        members=members,
    )
    header = template_generator.render('class-header.jinja', class_definition)
    source = template_generator.render('class-source.jinja', class_definition)

elif args.mode == 'generator':
    generator = CppClassGenerator(class_name, parent_class, members, generator_settings)
    header = generator.generate_header(args.property, args.inline_getter, args.inline_setter)
    source = generator.generate_source(args.class_file_name)

# print(str(header))
# print(str(source))

with open(args.class_file_name + '.h' + args.suffix, 'w') as f:
    f.write(str(header))

with open(args.class_file_name + '.cpp' + args.suffix, 'w') as f:
    f.write(str(source))
